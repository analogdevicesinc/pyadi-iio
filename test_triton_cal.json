{"report": {"environment": {"Python": "3.10.12", "Platform": "Linux-6.5.0-28-generic-x86_64-with-glibc2.35"}, "tests": [{"name": "test/test_triton_cal.py::test_loopback[channel:0-adjacent_loopback-Frequency (MHz):8000]", "duration": 3.4237830839847447, "run_index": 0, "setup": {"name": "setup", "duration": 0.0005149549979250878, "outcome": "passed"}, "call": {"name": "call", "duration": 3.422167612996418, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 0 input and connect spectrum analyzer into channel 0 output.  Press Enter when complete \n\nPower level (dBm): -2.333594E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005855609924765304, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.035476531018503, "run_index": 1, "setup": {"name": "setup", "duration": 0.0008810730068944395, "outcome": "passed"}, "call": {"name": "call", "duration": 2.033272473010584, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.780156E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00044191199413035065, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.028088621009374, "run_index": 2, "setup": {"name": "setup", "duration": 0.000895819001016207, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0259451400052058, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.476712E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003518430021358654, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.031128709000768, "run_index": 3, "setup": {"name": "setup", "duration": 0.0007767369970679283, "outcome": "passed"}, "call": {"name": "call", "duration": 2.029083827001159, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.524421E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.000491408005473204, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.039271468995139, "run_index": 4, "setup": {"name": "setup", "duration": 0.0009153540013357997, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0370494259987026, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.237093E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003913349937647581, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-combined_loopback-Frequency (MHz):8000]", "duration": 2.0297108100057812, "run_index": 5, "setup": {"name": "setup", "duration": 0.0007349070074269548, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0278452439961256, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.457435E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003957519948016852, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-combined_loopback-Frequency (MHz):9000]", "duration": 2.0354769459954696, "run_index": 6, "setup": {"name": "setup", "duration": 0.0008162529993569478, "outcome": "passed"}, "call": {"name": "call", "duration": 2.03348215999722, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.742538E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003622799995355308, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-combined_loopback-Frequency (MHz):10000]", "duration": 2.050934398008394, "run_index": 7, "setup": {"name": "setup", "duration": 0.0007754370017210022, "outcome": "passed"}, "call": {"name": "call", "duration": 2.048983305998263, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.829165E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00040021800668910146, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-combined_loopback-Frequency (MHz):11000]", "duration": 2.042677482997533, "run_index": 8, "setup": {"name": "setup", "duration": 0.0007948129932628945, "outcome": "passed"}, "call": {"name": "call", "duration": 2.040635283003212, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.904467E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004525740077951923, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:0-combined_loopback-Frequency (MHz):12000]", "duration": 2.0443833800090943, "run_index": 9, "setup": {"name": "setup", "duration": 0.0009132730046985671, "outcome": "passed"}, "call": {"name": "call", "duration": 2.042161560995737, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.183840E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003952730039600283, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-adjacent_loopback-Frequency (MHz):8000]", "duration": 2.595618648992968, "run_index": 10, "setup": {"name": "setup", "duration": 0.0008277739980258048, "outcome": "passed"}, "call": {"name": "call", "duration": 2.5934666999964975, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 1 input and connect spectrum analyzer into channel 1 output.  Press Enter when complete \n\nPower level (dBm): -2.230024E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004964010004187003, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.0390381420147605, "run_index": 11, "setup": {"name": "setup", "duration": 0.0009279310033889487, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0367857509991154, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.679692E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003965290088672191, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0438845260359813, "run_index": 12, "setup": {"name": "setup", "duration": 0.000799826011643745, "outcome": "passed"}, "call": {"name": "call", "duration": 2.041783374006627, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.381808E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005015000060666353, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.0370416169898817, "run_index": 13, "setup": {"name": "setup", "duration": 0.0009704429976409301, "outcome": "passed"}, "call": {"name": "call", "duration": 2.034720103998552, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.432963E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003806269960477948, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.0392269080184633, "run_index": 14, "setup": {"name": "setup", "duration": 0.000764256008551456, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0373274970042985, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.176468E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003708989970618859, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-combined_loopback-Frequency (MHz):8000]", "duration": 2.0817219509917777, "run_index": 15, "setup": {"name": "setup", "duration": 0.0008536319946870208, "outcome": "passed"}, "call": {"name": "call", "duration": 2.079657128007966, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.456286E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003575589944375679, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-combined_loopback-Frequency (MHz):9000]", "duration": 2.0468090389913414, "run_index": 16, "setup": {"name": "setup", "duration": 0.0006434209935832769, "outcome": "passed"}, "call": {"name": "call", "duration": 2.04523168700689, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.722204E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0002905099972849712, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-combined_loopback-Frequency (MHz):10000]", "duration": 2.034910257003503, "run_index": 17, "setup": {"name": "setup", "duration": 0.0005985280004097149, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0333347109990427, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.833835E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00037849000364076346, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-combined_loopback-Frequency (MHz):11000]", "duration": 2.0360577319952426, "run_index": 18, "setup": {"name": "setup", "duration": 0.0007946120022097602, "outcome": "passed"}, "call": {"name": "call", "duration": 2.034012158997939, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.944946E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004563489928841591, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:1-combined_loopback-Frequency (MHz):12000]", "duration": 2.030499544023769, "run_index": 19, "setup": {"name": "setup", "duration": 0.0011158740089740604, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0277684650063748, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.174156E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004993309994461015, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-adjacent_loopback-Frequency (MHz):8000]", "duration": 2.6277638239698717, "run_index": 20, "setup": {"name": "setup", "duration": 0.0009535339922877029, "outcome": "passed"}, "call": {"name": "call", "duration": 2.625446669990197, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 2 input and connect spectrum analyzer into channel 2 output.  Press Enter when complete \n\nPower level (dBm): -2.218463E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00041008599509950727, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.026995860011084, "run_index": 21, "setup": {"name": "setup", "duration": 0.0008173020032700151, "outcome": "passed"}, "call": {"name": "call", "duration": 2.024840772995958, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.670097E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005204830085858703, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0279330119956285, "run_index": 22, "setup": {"name": "setup", "duration": 0.0009457790001761168, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0256023519905284, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.412889E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004391020047478378, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.0387553560140077, "run_index": 23, "setup": {"name": "setup", "duration": 0.0008965930028352886, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0365092270076275, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.487153E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.000452943000709638, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.0558796920086024, "run_index": 24, "setup": {"name": "setup", "duration": 0.0008359280036529526, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0538086330052465, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.180782E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039920299605000764, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-combined_loopback-Frequency (MHz):8000]", "duration": 2.0417307519819587, "run_index": 25, "setup": {"name": "setup", "duration": 0.0007972559978952631, "outcome": "passed"}, "call": {"name": "call", "duration": 2.039687578988378, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.454370E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00044866099779028445, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-combined_loopback-Frequency (MHz):9000]", "duration": 2.043888601969229, "run_index": 26, "setup": {"name": "setup", "duration": 0.0009049879881786183, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0415777290036203, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.730575E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.000500896989251487, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-combined_loopback-Frequency (MHz):10000]", "duration": 2.0432073950069025, "run_index": 27, "setup": {"name": "setup", "duration": 0.0010024810035247356, "outcome": "passed"}, "call": {"name": "call", "duration": 2.040668788002222, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.833489E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005336449976311997, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-combined_loopback-Frequency (MHz):11000]", "duration": 2.050465222011553, "run_index": 28, "setup": {"name": "setup", "duration": 0.0010982170060742646, "outcome": "passed"}, "call": {"name": "call", "duration": 2.047721034992719, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.917443E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005477530066855252, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:2-combined_loopback-Frequency (MHz):12000]", "duration": 2.038369190006051, "run_index": 29, "setup": {"name": "setup", "duration": 0.0010419830068713054, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0358226459939033, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.150561E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00046257799840532243, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-adjacent_loopback-Frequency (MHz):8000]", "duration": 2.9321403309877496, "run_index": 30, "setup": {"name": "setup", "duration": 0.0008923669956857339, "outcome": "passed"}, "call": {"name": "call", "duration": 2.9299197340005776, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 3 input and connect spectrum analyzer into channel 3 output.  Press Enter when complete \n\nPower level (dBm): -2.171998E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004358629958005622, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.032365074963309, "run_index": 31, "setup": {"name": "setup", "duration": 0.0009310789901064709, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0300485999905504, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.601655E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004543169925455004, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0357997490355046, "run_index": 32, "setup": {"name": "setup", "duration": 0.0008512050117133185, "outcome": "passed"}, "call": {"name": "call", "duration": 2.033661766006844, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.347116E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004355730052338913, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.031417287988006, "run_index": 33, "setup": {"name": "setup", "duration": 0.0009004820021800697, "outcome": "passed"}, "call": {"name": "call", "duration": 2.029183871985879, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.395868E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00043245199776720256, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.075906489000772, "run_index": 34, "setup": {"name": "setup", "duration": 0.0008746789972065017, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0737725799990585, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.151501E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003845510073006153, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-combined_loopback-Frequency (MHz):8000]", "duration": 2.0436059920029948, "run_index": 35, "setup": {"name": "setup", "duration": 0.0007113879983080551, "outcome": "passed"}, "call": {"name": "call", "duration": 2.041825100008282, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.451448E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003581159980967641, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-combined_loopback-Frequency (MHz):9000]", "duration": 2.029049734977889, "run_index": 36, "setup": {"name": "setup", "duration": 0.0007765019981889054, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0269924539898057, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.751336E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005042769917054102, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-combined_loopback-Frequency (MHz):10000]", "duration": 2.0312319439981366, "run_index": 37, "setup": {"name": "setup", "duration": 0.0009009530040202662, "outcome": "passed"}, "call": {"name": "call", "duration": 2.028981190000195, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.813161E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00044884798990096897, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-combined_loopback-Frequency (MHz):11000]", "duration": 2.059288151009241, "run_index": 38, "setup": {"name": "setup", "duration": 0.000909384005353786, "outcome": "passed"}, "call": {"name": "call", "duration": 2.057073436008068, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.909009E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039594699046574533, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:3-combined_loopback-Frequency (MHz):12000]", "duration": 2.090973212980316, "run_index": 39, "setup": {"name": "setup", "duration": 0.0009045149927260354, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0887620050052647, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.194501E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00040217798959929496, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-adjacent_loopback-Frequency (MHz):8000]", "duration": 17.68417252598738, "run_index": 40, "setup": {"name": "setup", "duration": 0.0009182139910990372, "outcome": "passed"}, "call": {"name": "call", "duration": 17.68178541700763, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 4 input and connect spectrum analyzer into channel 4 output.  Press Enter when complete \n\nPower level (dBm): -2.138231E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005506809975486249, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.0788413740083342, "run_index": 41, "setup": {"name": "setup", "duration": 0.0010679810075089335, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0761381899937987, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.586224E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.000567221999517642, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.035882121010218, "run_index": 42, "setup": {"name": "setup", "duration": 0.001128596006310545, "outcome": "passed"}, "call": {"name": "call", "duration": 2.033210601002793, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.319999E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00041432799480389804, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.048480887970072, "run_index": 43, "setup": {"name": "setup", "duration": 0.0008712439885130152, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0463619229994947, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.410837E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003764769935514778, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.0297993649874115, "run_index": 44, "setup": {"name": "setup", "duration": 0.0007830190006643534, "outcome": "passed"}, "call": {"name": "call", "duration": 2.027865029987879, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.081164E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003682969982037321, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-combined_loopback-Frequency (MHz):8000]", "duration": 2.0434262369963108, "run_index": 45, "setup": {"name": "setup", "duration": 0.0007363339973380789, "outcome": "passed"}, "call": {"name": "call", "duration": 2.041555160001735, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.448893E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039840899989940226, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-combined_loopback-Frequency (MHz):9000]", "duration": 2.0496248730050866, "run_index": 46, "setup": {"name": "setup", "duration": 0.0008716960001038387, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0474495840026066, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.749330E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00043189700227230787, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-combined_loopback-Frequency (MHz):10000]", "duration": 2.054875328001799, "run_index": 47, "setup": {"name": "setup", "duration": 0.0008912199991755188, "outcome": "passed"}, "call": {"name": "call", "duration": 2.052721542000654, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.819561E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00037134600279387087, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-combined_loopback-Frequency (MHz):11000]", "duration": 2.038730571002816, "run_index": 48, "setup": {"name": "setup", "duration": 0.000754316002712585, "outcome": "passed"}, "call": {"name": "call", "duration": 2.03686325099261, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.903098E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00035868800478056073, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:4-combined_loopback-Frequency (MHz):12000]", "duration": 2.047250421019271, "run_index": 49, "setup": {"name": "setup", "duration": 0.0008040520042413846, "outcome": "passed"}, "call": {"name": "call", "duration": 2.045259934006026, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.190147E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003823830047622323, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-adjacent_loopback-Frequency (MHz):8000]", "duration": 2.6454365979880095, "run_index": 50, "setup": {"name": "setup", "duration": 0.0008391960000153631, "outcome": "passed"}, "call": {"name": "call", "duration": 2.6432307959912578, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 5 input and connect spectrum analyzer into channel 5 output.  Press Enter when complete \n\nPower level (dBm): -2.134590E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005274099967209622, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.0338732299715048, "run_index": 51, "setup": {"name": "setup", "duration": 0.0010435899894218892, "outcome": "passed"}, "call": {"name": "call", "duration": 2.03133089999028, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.585574E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00045515000238083303, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.083566440982395, "run_index": 52, "setup": {"name": "setup", "duration": 0.0009243649983545765, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0811438109958544, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.289994E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005738999898312613, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.088176922974526, "run_index": 53, "setup": {"name": "setup", "duration": 0.001118485990446061, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0853919479995966, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.346200E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005480029940372333, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.059839314009878, "run_index": 54, "setup": {"name": "setup", "duration": 0.0009432240040041506, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0575495420052903, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.065976E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00040332399657927454, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-combined_loopback-Frequency (MHz):8000]", "duration": 2.0394388960121432, "run_index": 55, "setup": {"name": "setup", "duration": 0.0008570180070819333, "outcome": "passed"}, "call": {"name": "call", "duration": 2.037260728000547, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.448481E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00046413199743255973, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-combined_loopback-Frequency (MHz):9000]", "duration": 2.0458541930129286, "run_index": 56, "setup": {"name": "setup", "duration": 0.0009758020023582503, "outcome": "passed"}, "call": {"name": "call", "duration": 2.043521793006221, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.728931E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00038079600199125707, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-combined_loopback-Frequency (MHz):10000]", "duration": 2.0275173490081215, "run_index": 57, "setup": {"name": "setup", "duration": 0.0007531400042353198, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0254948920046445, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.808509E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005161769950063899, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-combined_loopback-Frequency (MHz):11000]", "duration": 2.0403383640077664, "run_index": 58, "setup": {"name": "setup", "duration": 0.0009728750010253862, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0378208909969544, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.893351E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005717230087611824, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:5-combined_loopback-Frequency (MHz):12000]", "duration": 2.025403695006389, "run_index": 59, "setup": {"name": "setup", "duration": 0.0010517850023461506, "outcome": "passed"}, "call": {"name": "call", "duration": 2.022943686999497, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.169255E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003564380021998659, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-adjacent_loopback-Frequency (MHz):8000]", "duration": 7.9345105459942715, "run_index": 60, "setup": {"name": "setup", "duration": 0.0007723769958829507, "outcome": "passed"}, "call": {"name": "call", "duration": 7.932531429003575, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 6 input and connect spectrum analyzer into channel 6 output.  Press Enter when complete \n\nPower level (dBm): -2.166410E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004343629989307374, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.03620172997762, "run_index": 61, "setup": {"name": "setup", "duration": 0.0008597409905632958, "outcome": "passed"}, "call": {"name": "call", "duration": 2.034098087999155, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.564763E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003841599973384291, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.043914455003687, "run_index": 62, "setup": {"name": "setup", "duration": 0.0008221129974117503, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0418042410019552, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.296181E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00046598800690844655, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.046430756978225, "run_index": 63, "setup": {"name": "setup", "duration": 0.0008405559929087758, "outcome": "passed"}, "call": {"name": "call", "duration": 2.044246221994399, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.339686E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005034229980083182, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.043364665005356, "run_index": 64, "setup": {"name": "setup", "duration": 0.0008891990000847727, "outcome": "passed"}, "call": {"name": "call", "duration": 2.041216480996809, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.039794E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003697860083775595, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-combined_loopback-Frequency (MHz):8000]", "duration": 2.0363473259931197, "run_index": 65, "setup": {"name": "setup", "duration": 0.0007700080022914335, "outcome": "passed"}, "call": {"name": "call", "duration": 2.034432458996889, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.432702E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00037485099164769053, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-combined_loopback-Frequency (MHz):9000]", "duration": 2.0388009779999265, "run_index": 66, "setup": {"name": "setup", "duration": 0.0007919530034996569, "outcome": "passed"}, "call": {"name": "call", "duration": 2.036760572998901, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.736061E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004564989940263331, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-combined_loopback-Frequency (MHz):10000]", "duration": 2.0318424699798925, "run_index": 67, "setup": {"name": "setup", "duration": 0.0008549999911338091, "outcome": "passed"}, "call": {"name": "call", "duration": 2.029765908999252, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.812300E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003665609983727336, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-combined_loopback-Frequency (MHz):11000]", "duration": 2.030527520022588, "run_index": 68, "setup": {"name": "setup", "duration": 0.0007468360126949847, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0285842409939505, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.898027E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00044960700324736536, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:6-combined_loopback-Frequency (MHz):12000]", "duration": 2.0416530879883794, "run_index": 69, "setup": {"name": "setup", "duration": 0.0008907099982025102, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0395012730004964, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.139090E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003703949914779514, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-adjacent_loopback-Frequency (MHz):8000]", "duration": 9.234801810001954, "run_index": 70, "setup": {"name": "setup", "duration": 0.00073350100137759, "outcome": "passed"}, "call": {"name": "call", "duration": 9.232965083996532, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 7 input and connect spectrum analyzer into channel 7 output.  Press Enter when complete \n\nPower level (dBm): -2.130852E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003697240026667714, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.084169726993423, "run_index": 71, "setup": {"name": "setup", "duration": 0.0008331949939019978, "outcome": "passed"}, "call": {"name": "call", "duration": 2.082135112999822, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.558909E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003682240057969466, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.044606023002416, "run_index": 72, "setup": {"name": "setup", "duration": 0.0008168530039256439, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0425996580015635, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.246423E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00037265899300109595, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.0444810000044527, "run_index": 73, "setup": {"name": "setup", "duration": 0.0007908560073701665, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0425603069888894, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.358928E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003389810008229688, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.047432892024517, "run_index": 74, "setup": {"name": "setup", "duration": 0.0007365900091826916, "outcome": "passed"}, "call": {"name": "call", "duration": 2.04556199000217, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.066342E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039772200398147106, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-combined_loopback-Frequency (MHz):8000]", "duration": 2.083107930026017, "run_index": 75, "setup": {"name": "setup", "duration": 0.0007995860069058836, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0810935920017073, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.432290E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004151660104980692, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-combined_loopback-Frequency (MHz):9000]", "duration": 2.038606937014265, "run_index": 76, "setup": {"name": "setup", "duration": 0.0008479700045427307, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0363465010013897, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.740152E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005644960037898272, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-combined_loopback-Frequency (MHz):10000]", "duration": 2.0455326060182415, "run_index": 77, "setup": {"name": "setup", "duration": 0.0009843300067586824, "outcome": "passed"}, "call": {"name": "call", "duration": 2.043131917002029, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.803357E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004320290026953444, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-combined_loopback-Frequency (MHz):11000]", "duration": 2.027963907981757, "run_index": 78, "setup": {"name": "setup", "duration": 0.0008533499931218103, "outcome": "passed"}, "call": {"name": "call", "duration": 2.025858029999654, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.909830E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003991779958596453, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:7-combined_loopback-Frequency (MHz):12000]", "duration": 2.0495096530066803, "run_index": 79, "setup": {"name": "setup", "duration": 0.0008115800010273233, "outcome": "passed"}, "call": {"name": "call", "duration": 2.047403372998815, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.165433E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004831200058106333, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-adjacent_loopback-Frequency (MHz):8000]", "duration": 3.08751140597451, "run_index": 80, "setup": {"name": "setup", "duration": 0.00082388699229341, "outcome": "passed"}, "call": {"name": "call", "duration": 3.085375883994857, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 8 input and connect spectrum analyzer into channel 8 output.  Press Enter when complete \n\nPower level (dBm): -2.089874E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004877479950664565, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.0629628469905583, "run_index": 81, "setup": {"name": "setup", "duration": 0.0009370979969389737, "outcome": "passed"}, "call": {"name": "call", "duration": 2.060724675990059, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.541243E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.000363975006621331, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0485594799829414, "run_index": 82, "setup": {"name": "setup", "duration": 0.001230720998137258, "outcome": "passed"}, "call": {"name": "call", "duration": 2.04565856399131, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.239611E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004394739953568205, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.029384929992375, "run_index": 83, "setup": {"name": "setup", "duration": 0.0008531739877071232, "outcome": "passed"}, "call": {"name": "call", "duration": 2.027285315009067, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.300282E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003932670078938827, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.107860622010776, "run_index": 84, "setup": {"name": "setup", "duration": 0.0008147019980242476, "outcome": "passed"}, "call": {"name": "call", "duration": 2.1056896430091, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.034652E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005415750056272373, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-combined_loopback-Frequency (MHz):8000]", "duration": 2.0703805049852235, "run_index": 85, "setup": {"name": "setup", "duration": 0.0009319550008513033, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0680033799872035, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.448103E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005132149963174015, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-combined_loopback-Frequency (MHz):9000]", "duration": 2.045440838992363, "run_index": 86, "setup": {"name": "setup", "duration": 0.0009127049997914582, "outcome": "passed"}, "call": {"name": "call", "duration": 2.043218397986493, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.713148E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039703100628685206, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-combined_loopback-Frequency (MHz):10000]", "duration": 2.034533181998995, "run_index": 87, "setup": {"name": "setup", "duration": 0.0008157150004990399, "outcome": "passed"}, "call": {"name": "call", "duration": 2.032539858002565, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.811480E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00036189399543218315, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-combined_loopback-Frequency (MHz):11000]", "duration": 2.0630178909923416, "run_index": 88, "setup": {"name": "setup", "duration": 0.0007644239958608523, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0610266139992746, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.916929E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004624290013452992, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:8-combined_loopback-Frequency (MHz):12000]", "duration": 2.037849278000067, "run_index": 89, "setup": {"name": "setup", "duration": 0.000841676999698393, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0357237970019924, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.174973E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00044212699867784977, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-adjacent_loopback-Frequency (MHz):8000]", "duration": 8.95846889000677, "run_index": 90, "setup": {"name": "setup", "duration": 0.0008805480028968304, "outcome": "passed"}, "call": {"name": "call", "duration": 8.956328107000445, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 9 input and connect spectrum analyzer into channel 9 output.  Press Enter when complete \n\nPower level (dBm): -2.132819E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00037968700053170323, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.026768315001391, "run_index": 91, "setup": {"name": "setup", "duration": 0.000756838999222964, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0248802620044444, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.499283E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00037437499850057065, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0333644450001884, "run_index": 92, "setup": {"name": "setup", "duration": 0.0007400839967885986, "outcome": "passed"}, "call": {"name": "call", "duration": 2.031472369999392, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.223572E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00041190700721926987, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.0420880029996624, "run_index": 93, "setup": {"name": "setup", "duration": 0.0008328370022354648, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0400548369943863, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.339079E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00036749200080521405, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.0270997249754146, "run_index": 94, "setup": {"name": "setup", "duration": 0.0008644329936942086, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0249075049941894, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.024876E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004633539938367903, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-combined_loopback-Frequency (MHz):8000]", "duration": 2.035332404979272, "run_index": 95, "setup": {"name": "setup", "duration": 0.0009161509951809421, "outcome": "passed"}, "call": {"name": "call", "duration": 2.032990975989378, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.442798E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005091269995318726, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-combined_loopback-Frequency (MHz):9000]", "duration": 2.0363927369908197, "run_index": 96, "setup": {"name": "setup", "duration": 0.0009124179923674092, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0341615229990566, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.733546E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004063780070282519, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-combined_loopback-Frequency (MHz):10000]", "duration": 2.050076312982128, "run_index": 97, "setup": {"name": "setup", "duration": 0.0008383849926758558, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0479841339983977, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.819061E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004154089983785525, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-combined_loopback-Frequency (MHz):11000]", "duration": 2.0418431700236397, "run_index": 98, "setup": {"name": "setup", "duration": 0.0008300440094899386, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0397746180096874, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.904827E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004084639949724078, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:9-combined_loopback-Frequency (MHz):12000]", "duration": 2.0337457860150607, "run_index": 99, "setup": {"name": "setup", "duration": 0.0008616980048827827, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0315728849964216, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.155685E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00044950500887352973, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-adjacent_loopback-Frequency (MHz):8000]", "duration": 2.6482743129890878, "run_index": 100, "setup": {"name": "setup", "duration": 0.000865702997543849, "outcome": "passed"}, "call": {"name": "call", "duration": 2.6461278539936757, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 10 input and connect spectrum analyzer into channel 10 output.  Press Enter when complete \n\nPower level (dBm): -2.112556E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00041505300032440573, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.0273147900006734, "run_index": 101, "setup": {"name": "setup", "duration": 0.0009142409980995581, "outcome": "passed"}, "call": {"name": "call", "duration": 2.025118064993876, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.513917E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00036824301059823483, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.036515618994599, "run_index": 102, "setup": {"name": "setup", "duration": 0.0007809329981682822, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0345917609956814, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.199453E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003619920025812462, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.040178162016673, "run_index": 103, "setup": {"name": "setup", "duration": 0.0008051390032051131, "outcome": "passed"}, "call": {"name": "call", "duration": 2.038146360006067, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.357694E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004215240041958168, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.0378287569910754, "run_index": 104, "setup": {"name": "setup", "duration": 0.0008311720011988655, "outcome": "passed"}, "call": {"name": "call", "duration": 2.035793642993667, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.008343E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00037276999501045793, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-combined_loopback-Frequency (MHz):8000]", "duration": 2.03956505098904, "run_index": 105, "setup": {"name": "setup", "duration": 0.0008111939969239756, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0374869109946303, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.442154E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00045575200056191534, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-combined_loopback-Frequency (MHz):9000]", "duration": 2.043152480997378, "run_index": 106, "setup": {"name": "setup", "duration": 0.0009074469999177381, "outcome": "passed"}, "call": {"name": "call", "duration": 2.04077830100141, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.727101E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005592859961325303, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-combined_loopback-Frequency (MHz):10000]", "duration": 2.0317914210172603, "run_index": 107, "setup": {"name": "setup", "duration": 0.0008607240015408024, "outcome": "passed"}, "call": {"name": "call", "duration": 2.029663370005437, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.812026E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004066030087415129, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-combined_loopback-Frequency (MHz):11000]", "duration": 2.030757344997255, "run_index": 108, "setup": {"name": "setup", "duration": 0.000931104994378984, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0284472560015274, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.906392E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004478790069697425, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:10-combined_loopback-Frequency (MHz):12000]", "duration": 2.040303118992597, "run_index": 109, "setup": {"name": "setup", "duration": 0.0009627489926060662, "outcome": "passed"}, "call": {"name": "call", "duration": 2.037871623004321, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.154108E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005059980030637234, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-adjacent_loopback-Frequency (MHz):8000]", "duration": 2.7789927620178787, "run_index": 110, "setup": {"name": "setup", "duration": 0.0009325520077254623, "outcome": "passed"}, "call": {"name": "call", "duration": 2.7766395560029196, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 11 input and connect spectrum analyzer into channel 11 output.  Press Enter when complete \n\nPower level (dBm): -2.081146E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.000488101999508217, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.0457786450133426, "run_index": 111, "setup": {"name": "setup", "duration": 0.0009482210007263348, "outcome": "passed"}, "call": {"name": "call", "duration": 2.043487229006132, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.481223E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039497400575783104, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0384854230069323, "run_index": 112, "setup": {"name": "setup", "duration": 0.0008000060042832047, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0364819200040074, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.238755E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004034909943584353, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.0505669940030202, "run_index": 113, "setup": {"name": "setup", "duration": 0.0008282269991468638, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0484831979993032, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.316890E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00042734200542327017, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.029968999006087, "run_index": 114, "setup": {"name": "setup", "duration": 0.0008904349961085245, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0277450310095446, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.939113E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.000443098004325293, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-combined_loopback-Frequency (MHz):8000]", "duration": 2.0373710400162963, "run_index": 115, "setup": {"name": "setup", "duration": 0.0008077220118138939, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0353612619946944, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.441435E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039433399797417223, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-combined_loopback-Frequency (MHz):9000]", "duration": 2.03593585199269, "run_index": 116, "setup": {"name": "setup", "duration": 0.0008720420009922236, "outcome": "passed"}, "call": {"name": "call", "duration": 2.033753618990886, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.748139E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00043814899981953204, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-combined_loopback-Frequency (MHz):10000]", "duration": 2.0384847550012637, "run_index": 117, "setup": {"name": "setup", "duration": 0.0008605509938206524, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0362491230043815, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.823505E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005145300092408434, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-combined_loopback-Frequency (MHz):11000]", "duration": 2.065440271006082, "run_index": 118, "setup": {"name": "setup", "duration": 0.0009060140000656247, "outcome": "passed"}, "call": {"name": "call", "duration": 2.063240950999898, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.904517E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003872920060530305, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:11-combined_loopback-Frequency (MHz):12000]", "duration": 2.0274819230107823, "run_index": 119, "setup": {"name": "setup", "duration": 0.0007582260004710406, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0256103340070695, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.144627E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00035513700277078897, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-adjacent_loopback-Frequency (MHz):8000]", "duration": 4.0225761420006165, "run_index": 120, "setup": {"name": "setup", "duration": 0.0007205209985841066, "outcome": "passed"}, "call": {"name": "call", "duration": 4.020753771008458, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 12 input and connect spectrum analyzer into channel 12 output.  Press Enter when complete \n\nPower level (dBm): -2.061196E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00038132899499032646, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.026324344013119, "run_index": 121, "setup": {"name": "setup", "duration": 0.0008301740017486736, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0242086540092714, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.493923E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004553420003503561, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0317362410278292, "run_index": 122, "setup": {"name": "setup", "duration": 0.0008997390104923397, "outcome": "passed"}, "call": {"name": "call", "duration": 2.029568272002507, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.221745E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00036849100433755666, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.0487075339915464, "run_index": 123, "setup": {"name": "setup", "duration": 0.0008074299985310063, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0466397339914693, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.299590E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00045294000301510096, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.0585190909769153, "run_index": 124, "setup": {"name": "setup", "duration": 0.0009027669875649735, "outcome": "passed"}, "call": {"name": "call", "duration": 2.056267027001013, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.984290E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004465300007723272, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-combined_loopback-Frequency (MHz):8000]", "duration": 2.0426973029971123, "run_index": 125, "setup": {"name": "setup", "duration": 0.0008878329972503707, "outcome": "passed"}, "call": {"name": "call", "duration": 2.040510926002753, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.436324E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00041071099985856563, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-combined_loopback-Frequency (MHz):9000]", "duration": 2.0589559640066, "run_index": 126, "setup": {"name": "setup", "duration": 0.000834289996419102, "outcome": "passed"}, "call": {"name": "call", "duration": 2.056796139004291, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.721407E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.000491245009470731, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-combined_loopback-Frequency (MHz):10000]", "duration": 2.0383624719979707, "run_index": 127, "setup": {"name": "setup", "duration": 0.0009797859966056421, "outcome": "passed"}, "call": {"name": "call", "duration": 2.03600662300596, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.823908E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039627699879929423, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-combined_loopback-Frequency (MHz):11000]", "duration": 2.040129130007699, "run_index": 128, "setup": {"name": "setup", "duration": 0.0008277500019175932, "outcome": "passed"}, "call": {"name": "call", "duration": 2.038027932998375, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.903264E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004456970054889098, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:12-combined_loopback-Frequency (MHz):12000]", "duration": 2.0500316510006087, "run_index": 129, "setup": {"name": "setup", "duration": 0.0008561949944123626, "outcome": "passed"}, "call": {"name": "call", "duration": 2.047881940001389, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.149238E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004373210103949532, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-adjacent_loopback-Frequency (MHz):8000]", "duration": 3.6905512980010826, "run_index": 130, "setup": {"name": "setup", "duration": 0.0008734669972909614, "outcome": "passed"}, "call": {"name": "call", "duration": 3.688354223006172, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 13 input and connect spectrum analyzer into channel 13 output.  Press Enter when complete \n\nPower level (dBm): -2.030713E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004501410003285855, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.0432997809984954, "run_index": 131, "setup": {"name": "setup", "duration": 0.000861120002809912, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0410749509901507, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.493927E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005025900027249008, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0287649130041245, "run_index": 132, "setup": {"name": "setup", "duration": 0.0009094800043385476, "outcome": "passed"}, "call": {"name": "call", "duration": 2.02654722299485, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.178021E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003987300005974248, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.036331887997221, "run_index": 133, "setup": {"name": "setup", "duration": 0.0007831349939806387, "outcome": "passed"}, "call": {"name": "call", "duration": 2.034302229003515, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.265499E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004633890057448298, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.0530212669982575, "run_index": 134, "setup": {"name": "setup", "duration": 0.0009032579982886091, "outcome": "passed"}, "call": {"name": "call", "duration": 2.050759771009325, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.975998E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00045497999235522, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-combined_loopback-Frequency (MHz):8000]", "duration": 2.039712709010928, "run_index": 135, "setup": {"name": "setup", "duration": 0.0009253140015061945, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0373694650043035, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.439052E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004926160036120564, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-combined_loopback-Frequency (MHz):9000]", "duration": 2.026850308990106, "run_index": 136, "setup": {"name": "setup", "duration": 0.0009090719977393746, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0245020639995346, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.716907E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005301009950926527, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-combined_loopback-Frequency (MHz):10000]", "duration": 2.0580250559869455, "run_index": 137, "setup": {"name": "setup", "duration": 0.0009984939970308915, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0556046209967462, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.805051E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004234469961374998, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-combined_loopback-Frequency (MHz):11000]", "duration": 2.0321813360060332, "run_index": 138, "setup": {"name": "setup", "duration": 0.0008964080043369904, "outcome": "passed"}, "call": {"name": "call", "duration": 2.029977536003571, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.883886E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004109839937882498, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:13-combined_loopback-Frequency (MHz):12000]", "duration": 2.042611060998752, "run_index": 139, "setup": {"name": "setup", "duration": 0.0008622669993201271, "outcome": "passed"}, "call": {"name": "call", "duration": 2.040481739997631, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.142610E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00040478700248058885, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-adjacent_loopback-Frequency (MHz):8000]", "duration": 3.769758690003073, "run_index": 140, "setup": {"name": "setup", "duration": 0.000988630999927409, "outcome": "passed"}, "call": {"name": "call", "duration": 3.7673729060043115, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 14 input and connect spectrum analyzer into channel 14 output.  Press Enter when complete \n\nPower level (dBm): -2.073842E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004085219989065081, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.0473800350300735, "run_index": 141, "setup": {"name": "setup", "duration": 0.0008542490104446188, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0451589970034547, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.460837E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005125400057295337, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.0930000950029353, "run_index": 142, "setup": {"name": "setup", "duration": 0.0009297710057580844, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0907159380003577, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.178026E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.00042461499106138945, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.0450205109955277, "run_index": 143, "setup": {"name": "setup", "duration": 0.0008702589984750375, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0429147120012203, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.249483E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003652809973573312, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.027370427007554, "run_index": 144, "setup": {"name": "setup", "duration": 0.0007610460015712306, "outcome": "passed"}, "call": {"name": "call", "duration": 2.025487813996733, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.007717E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003605210076784715, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-combined_loopback-Frequency (MHz):8000]", "duration": 2.029808432998834, "run_index": 145, "setup": {"name": "setup", "duration": 0.0007914809975773096, "outcome": "passed"}, "call": {"name": "call", "duration": 2.027861643000506, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.441287E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.000363828003173694, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-combined_loopback-Frequency (MHz):9000]", "duration": 2.0454005579813384, "run_index": 146, "setup": {"name": "setup", "duration": 0.0007423389906762168, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0434970689966576, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.714533E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.000418811003328301, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-combined_loopback-Frequency (MHz):10000]", "duration": 2.0296606170159066, "run_index": 147, "setup": {"name": "setup", "duration": 0.0007546300039393827, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0277496030030306, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.828233E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00040175400499720126, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-combined_loopback-Frequency (MHz):11000]", "duration": 2.029656200989848, "run_index": 148, "setup": {"name": "setup", "duration": 0.0008077999955276027, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0275443010032177, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.890904E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004962999955751002, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:14-combined_loopback-Frequency (MHz):12000]", "duration": 2.043586382002104, "run_index": 149, "setup": {"name": "setup", "duration": 0.0009145619987975806, "outcome": "passed"}, "call": {"name": "call", "duration": 2.041319552998175, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.169797E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00043770500633399934, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-adjacent_loopback-Frequency (MHz):8000]", "duration": 3.108400736018666, "run_index": 150, "setup": {"name": "setup", "duration": 0.0008317190076922998, "outcome": "passed"}, "call": {"name": "call", "duration": 3.1063749020104297, "outcome": "passed", "stdout": "\n\nConnect signal generator into channel 15 input and connect spectrum analyzer into channel 15 output.  Press Enter when complete \n\nPower level (dBm): -2.025265E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003623959928518161, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-adjacent_loopback-Frequency (MHz):9000]", "duration": 2.075078621011926, "run_index": 151, "setup": {"name": "setup", "duration": 0.0008397170022362843, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0729598960024305, "outcome": "passed", "stdout": "\n\nPower level (dBm): -2.458950E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004392910050228238, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-adjacent_loopback-Frequency (MHz):10000]", "duration": 2.1301583319873316, "run_index": 152, "setup": {"name": "setup", "duration": 0.0008615149999968708, "outcome": "passed"}, "call": {"name": "call", "duration": 2.1279783549980493, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.169952E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004569469892885536, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-adjacent_loopback-Frequency (MHz):11000]", "duration": 2.030954613990616, "run_index": 153, "setup": {"name": "setup", "duration": 0.0008939859981182963, "outcome": "passed"}, "call": {"name": "call", "duration": 2.028724578995025, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.302641E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004420629993546754, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-adjacent_loopback-Frequency (MHz):12000]", "duration": 2.0292795359855518, "run_index": 154, "setup": {"name": "setup", "duration": 0.0008851019956637174, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0270674799976405, "outcome": "passed", "stdout": "\n\nPower level (dBm): -3.913373E+00\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004418519965838641, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-combined_loopback-Frequency (MHz):8000]", "duration": 2.038808949000668, "run_index": 155, "setup": {"name": "setup", "duration": 0.0009371320047648624, "outcome": "passed"}, "call": {"name": "call", "duration": 2.036458105998463, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.435290E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00047657899267505854, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-combined_loopback-Frequency (MHz):9000]", "duration": 2.0323631500214105, "run_index": 156, "setup": {"name": "setup", "duration": 0.0009159330074908212, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0301749130012468, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.737288E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003563710051821545, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-combined_loopback-Frequency (MHz):10000]", "duration": 2.0916276650241343, "run_index": 157, "setup": {"name": "setup", "duration": 0.0007561530073871836, "outcome": "passed"}, "call": {"name": "call", "duration": 2.089724377001403, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.807356E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003909820079570636, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-combined_loopback-Frequency (MHz):11000]", "duration": 2.0856251980003435, "run_index": 158, "setup": {"name": "setup", "duration": 0.0007936430047266185, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0835964629950467, "outcome": "passed", "stdout": "\n\nPower level (dBm): -4.881397E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004414489958435297, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_loopback[channel:15-combined_loopback-Frequency (MHz):12000]", "duration": 2.0307278010004666, "run_index": 159, "setup": {"name": "setup", "duration": 0.0009181100031128153, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0284938830009196, "outcome": "passed", "stdout": "\n\nPower level (dBm): -5.157153E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00039769799332134426, "outcome": "passed"}, "outcome": "passed"}, {"name": "test/test_triton_cal.py::test_tx_combined_out[Frequency (MHz):8000]", "duration": 3.4665469129686244, "run_index": 160, "setup": {"name": "setup", "duration": 0.0006285869894782081, "outcome": "passed"}, "call": {"name": "call", "duration": 3.4651575600000797, "outcome": "failed", "longrepr": "frequency = 8000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_tx_combined_out(frequency):\n    \n        # Combined Tx Out test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into channel 0 input.  Connect spectrum analyzer to the combined Tx out SMA port on top of the board.  Press enter when complete')\n            _set_SMA_inout()\n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -66 > -40\nE        +  where -66 = int(-66.57162)\nE        +    where -66.57162 = float('-6.657162E+01\\n')\n\ntest/test_triton_cal.py:170: AssertionError", "stdout": "\n\nConnect signal generator into channel 0 input.  Connect spectrum analyzer to the combined Tx out SMA port on top of the board.  Press enter when complete\n\nPower level (dBm): -6.657162E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.000132178989588283, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_tx_combined_out[Frequency (MHz):9000]", "duration": 2.0238845530257095, "run_index": 161, "setup": {"name": "setup", "duration": 0.00017327400564681739, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0233300180116203, "outcome": "failed", "longrepr": "frequency = 9000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_tx_combined_out(frequency):\n    \n        # Combined Tx Out test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into channel 0 input.  Connect spectrum analyzer to the combined Tx out SMA port on top of the board.  Press enter when complete')\n            _set_SMA_inout()\n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -66 > -40\nE        +  where -66 = int(-66.87953)\nE        +    where -66.87953 = float('-6.687953E+01\\n')\n\ntest/test_triton_cal.py:170: AssertionError", "stdout": "\n\nPower level (dBm): -6.687953E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00020798700279556215, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_tx_combined_out[Frequency (MHz):10000]", "duration": 2.1022440740198363, "run_index": 162, "setup": {"name": "setup", "duration": 0.00037721901026088744, "outcome": "passed"}, "call": {"name": "call", "duration": 2.101385450005182, "outcome": "failed", "longrepr": "frequency = 10000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_tx_combined_out(frequency):\n    \n        # Combined Tx Out test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into channel 0 input.  Connect spectrum analyzer to the combined Tx out SMA port on top of the board.  Press enter when complete')\n            _set_SMA_inout()\n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -66 > -40\nE        +  where -66 = int(-66.91444)\nE        +    where -66.91444 = float('-6.691444E+01\\n')\n\ntest/test_triton_cal.py:170: AssertionError", "stdout": "\n\nPower level (dBm): -6.691444E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00010418599413242191, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_tx_combined_out[Frequency (MHz):11000]", "duration": 2.0492590089997975, "run_index": 163, "setup": {"name": "setup", "duration": 0.00017487599689047784, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0487972359987907, "outcome": "failed", "longrepr": "frequency = 11000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_tx_combined_out(frequency):\n    \n        # Combined Tx Out test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into channel 0 input.  Connect spectrum analyzer to the combined Tx out SMA port on top of the board.  Press enter when complete')\n            _set_SMA_inout()\n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -66 > -40\nE        +  where -66 = int(-66.07944)\nE        +    where -66.07944 = float('-6.607944E+01\\n')\n\ntest/test_triton_cal.py:170: AssertionError", "stdout": "\n\nPower level (dBm): -6.607944E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00011202100722584873, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_tx_combined_out[Frequency (MHz):12000]", "duration": 2.0506505509692943, "run_index": 164, "setup": {"name": "setup", "duration": 0.00018243798695039004, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0501771149865817, "outcome": "failed", "longrepr": "frequency = 12000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_tx_combined_out(frequency):\n    \n        # Combined Tx Out test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into channel 0 input.  Connect spectrum analyzer to the combined Tx out SMA port on top of the board.  Press enter when complete')\n            _set_SMA_inout()\n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -65 > -40\nE        +  where -65 = int(-65.81541)\nE        +    where -65.81541 = float('-6.581541E+01\\n')\n\ntest/test_triton_cal.py:170: AssertionError", "stdout": "\n\nPower level (dBm): -6.581541E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00010856000881176442, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_rx_combined_in[Frequency (MHz):8000]", "duration": 5.881846339980257, "run_index": 165, "setup": {"name": "setup", "duration": 0.0001779509912012145, "outcome": "passed"}, "call": {"name": "call", "duration": 5.881272055994486, "outcome": "failed", "longrepr": "frequency = 8000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_rx_combined_in(frequency):\n    \n        # Combined Rx In test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into Rx SMA input on top of the board.  Connect spectrum analyzer into channel 0 output.  Press enter when complete')\n            _set_SMA_inout()\n    \n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -66 > -40\nE        +  where -66 = int(-66.63196)\nE        +    where -66.63196 = float('-6.663196E+01\\n')\n\ntest/test_triton_cal.py:203: AssertionError", "stdout": "\n\nConnect signal generator into Rx SMA input on top of the board.  Connect spectrum analyzer into channel 0 output.  Press enter when complete\n\nPower level (dBm): -6.663196E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.0002183820033678785, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_rx_combined_in[Frequency (MHz):9000]", "duration": 2.029691258998355, "run_index": 166, "setup": {"name": "setup", "duration": 0.00035358300374355167, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0287605109915603, "outcome": "failed", "longrepr": "frequency = 9000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_rx_combined_in(frequency):\n    \n        # Combined Rx In test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into Rx SMA input on top of the board.  Connect spectrum analyzer into channel 0 output.  Press enter when complete')\n            _set_SMA_inout()\n    \n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -66 > -40\nE        +  where -66 = int(-66.46659)\nE        +    where -66.46659 = float('-6.646659E+01\\n')\n\ntest/test_triton_cal.py:203: AssertionError", "stdout": "\n\nPower level (dBm): -6.646659E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00022358199930749834, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_rx_combined_in[Frequency (MHz):10000]", "duration": 2.0411025069915922, "run_index": 167, "setup": {"name": "setup", "duration": 0.0003759789979085326, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0402402600011555, "outcome": "failed", "longrepr": "frequency = 10000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_rx_combined_in(frequency):\n    \n        # Combined Rx In test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into Rx SMA input on top of the board.  Connect spectrum analyzer into channel 0 output.  Press enter when complete')\n            _set_SMA_inout()\n    \n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -65 > -40\nE        +  where -65 = int(-65.18957)\nE        +    where -65.18957 = float('-6.518957E+01\\n')\n\ntest/test_triton_cal.py:203: AssertionError", "stdout": "\n\nPower level (dBm): -6.518957E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.00011028899461962283, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_rx_combined_in[Frequency (MHz):11000]", "duration": 2.044696981974994, "run_index": 168, "setup": {"name": "setup", "duration": 0.0001732729870127514, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0442535689944634, "outcome": "failed", "longrepr": "frequency = 11000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_rx_combined_in(frequency):\n    \n        # Combined Rx In test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into Rx SMA input on top of the board.  Connect spectrum analyzer into channel 0 output.  Press enter when complete')\n            _set_SMA_inout()\n    \n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -64 > -40\nE        +  where -64 = int(-64.92614)\nE        +    where -64.92614 = float('-6.492614E+01\\n')\n\ntest/test_triton_cal.py:203: AssertionError", "stdout": "\n\nPower level (dBm): -6.492614E+01\n\n"}, "teardown": {"name": "teardown", "duration": 9.68670065049082e-05, "outcome": "passed"}, "outcome": "failed"}, {"name": "test/test_triton_cal.py::test_rx_combined_in[Frequency (MHz):12000]", "duration": 2.0371998330083443, "run_index": 169, "setup": {"name": "setup", "duration": 0.0001757200079737231, "outcome": "passed"}, "call": {"name": "call", "duration": 2.0310152059973916, "outcome": "failed", "longrepr": "frequency = 12000\n\n    @pytest.mark.parametrize(\"frequency\", [8000, 9000, 10000, 11000, 12000], ids=lambda x: f\"Frequency (MHz):{x}\")\n    def test_rx_combined_in(frequency):\n    \n        # Combined Rx In test\n        if (frequency == 8000):\n            input('\\n\\nConnect signal generator into Rx SMA input on top of the board.  Connect spectrum analyzer into channel 0 output.  Press enter when complete')\n            _set_SMA_inout()\n    \n    \n        # Set up signal generator\n        _set_frequency_MHz(frequency, HMCT2220)  # Set frequency of sig gen\n        _set_power_level_dBm(15, HMCT2220) # Set sig gen power level to 10 dBm\n        _set_output('ON', HMCT2220) # Set sig gen output on\n        time.sleep(1) # Buffer time of 1 second\n    \n        # Set up spectrum analyzer\n        _set_mode('SA', FieldFox)  # Select spectrum analyzer mode for FieldFox\n        _set_attenuation_level(0, FieldFox) # Set attenuation level to 0 dB\n        _set_center_freq_MHz(10000, FieldFox) # Set center frequency to 10 GHz\n        _set_span_MHz(20000, FieldFox) # Set span to 20 GHz\n        _set_res_bandwidth(1, FieldFox) # Sets resolution bandwidth to 1 MHz\n        time.sleep(1) # Buffer time of 1 second\n        _set_marker_to_peak(1, FieldFox) # Sets marker 1 to peak\n        peak_power = _get_peak_power_level(1, FieldFox) # Gets the power at marker 1\n        print(\"\\n\\nPower level (dBm): {}\".format(peak_power))\n    \n>       assert int(float(peak_power)) > -40\nE       AssertionError: assert -65 > -40\nE        +  where -65 = int(-65.52882)\nE        +    where -65.52882 = float('-6.552882E+01\\n')\n\ntest/test_triton_cal.py:203: AssertionError", "stdout": "\n\nPower level (dBm): -6.552882E+01\n\n"}, "teardown": {"name": "teardown", "duration": 0.005833186995005235, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 160, "failed": 10, "num_tests": 170, "duration": 409.0013370513916}, "created_at": "2024-04-23 15:45:50.321681"}}
