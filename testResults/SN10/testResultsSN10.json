{"report": {"environment": {"Python": "3.11.5", "Platform": "Windows-10-10.0.22631-SP0"}, "tests": [{"name": "test/test_triton.py::test_bootup", "duration": 0.007089800012181513, "run_index": 0, "setup": {"name": "setup", "duration": 0.0018676000036066398, "outcome": "passed"}, "call": {"name": "call", "duration": 0.002860400010831654, "outcome": "failed", "longrepr": "def test_bootup():\n        import os\n        import subprocess\n    \n        dir_path = os.path.dirname(os.path.realpath(__file__))\n        print(dir_path)\n        boot_path = os.path.join(dir_path, 'vcu118_quad_ad9084_2023-09-28')\n        tcl_script_path = os.path.join(boot_path, 'run_me.tcl')\n    \n        # Path to Vivado Lab executable\n        vivado_lab_executable = r\"/tools/Xilinx/Vivado_Lab/2023.2/bin/xsdb\"\n    \n        # Open Xilinx xsdb tool and\n        # source run.tcl\n        bitstream = os.path.join(boot_path, \"system_top_26p4.bit\")\n        strip = os.path.join(boot_path, \"simpleImage_26p4.strip\" )\n        script = f\"\"\"\n        connect\n        fpga -f \"{bitstream.replace(os.sep, '/')}\"\n        after 1000\n        target 3\n        dow \"{strip.replace(os.sep, '/')}\"\n        after 1000\n        con\n        disconnect\n        \"\"\"\n        with open(tcl_script_path, 'w') as f:\n            f.write(script)\n    \n        # Command to run Vivado Lab with the Tcl script\n        command = [vivado_lab_executable, '-eval', 'source', tcl_script_path]\n        print(command)\n    \n        # Run the command\n>       subprocess.run(command)\n\ntest\\test_triton.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\JChambli\\.pyenv\\pyenv-win\\versions\\3.11.5\\Lib\\subprocess.py:548: in run\n    with Popen(*popenargs, **kwargs) as process:\nC:\\Users\\JChambli\\.pyenv\\pyenv-win\\versions\\3.11.5\\Lib\\subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: None args: ['/tools/Xilinx/Vivado_Lab/2023.2/bin/xsdb', ...>\nargs = '/tools/Xilinx/Vivado_Lab/2023.2/bin/xsdb -eval source C:\\\\ADI\\\\Triton\\\\pyadi-iio\\\\test\\\\vcu118_quad_ad9084_2023-09-28\\\\run_me.tcl', executable = None, preexec_fn = None, close_fds = True, pass_fds = ()\ncwd = None, env = None, startupinfo = <subprocess.STARTUPINFO object at 0x000001CFB4328F50>, creationflags = 0, shell = False, p2cread = -1, p2cwrite = -1, c2pread = -1, c2pwrite = -1, errread = -1\nerrwrite = -1, unused_restore_signals = True, unused_gid = None, unused_gids = None, unused_uid = None, unused_umask = -1, unused_start_new_session = False, unused_process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session, unused_process_group):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            if not executable:\n                # gh-101283: without a fully-qualified path, before Windows\n                # checks the system directories, it first looks in the\n                # application directory, and also the current directory if\n                # NeedCurrentDirectoryForExePathW(ExeName) is true, so try\n                # to avoid executing unqualified \"cmd.exe\".\n                comspec = os.environ.get('ComSpec')\n                if not comspec:\n                    system_root = os.environ.get('SystemRoot', '')\n                    comspec = os.path.join(system_root, 'System32', 'cmd.exe')\n                    if not os.path.isabs(comspec):\n                        raise FileNotFoundError('shell not found: neither %ComSpec% nor %SystemRoot% is set')\n                if os.path.isabs(comspec):\n                    executable = comspec\n            else:\n                comspec = executable\n    \n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    FileNotFoundError: [WinError 2] The system cannot find the file specified\n\nC:\\Users\\JChambli\\.pyenv\\pyenv-win\\versions\\3.11.5\\Lib\\subprocess.py:1538: FileNotFoundError"}, "teardown": {"name": "teardown", "duration": 0.0004941999941365793, "outcome": "passed"}, "outcome": "failed"}], "summary": {"failed": 1, "num_tests": 1, "duration": 0.3990015983581543}, "created_at": "2024-07-23 10:06:52.262488"}}